import random

# 1 Задание.
# Предложение называется танцующим, если его первая буква прописная, а регистр каждой последующей буквы противоположен предыдущему. Пробелы и все символы кроме букв следует игнорировать при определении регистра букв. Например, «A b Cd» является танцующим предложением, потому что первая буква (’A’) - заглавная, следующая буква (’b’) - строчная, следующая буква (’C’) - заглавная, а следующая буква (’d’) в нижнем регистре.

# Формат входных данных
# Вход содержит несколько тестовых примеров. Каждый тестовый пример состоит из одной строки, которая содержит строковое предложение. Эта строка будет содержать от 1 до 50 символов (’A’
# ’Z’, ’a’ - ’z’ или пробел ’ ’), включительно или хотя бы одну букву (’A’ -’Z’, ’a’-’z’).

# txt = 'SjHdN $%^ kJ%^s K 45$%^uBvH 3hKe J35eHrBgK'
# txt_without_characters = ''
# for i in txt:
#     if i.isalpha():
#         txt_without_characters += i
# y = 0
# a = 1
# try:
#     for z in txt_without_characters:
#         if txt_without_characters[0].islower():
#             if txt_without_characters[y].islower() and txt_without_characters[a].istitle():
#                 y += 2
#                 a += 2
#         elif txt_without_characters[0].istitle():
#             if txt_without_characters[y].istitle() and txt_without_characters[a].islower():
#                 y += 2
#                 a += 2
# except IndexError:
#     print('Предложение танцующий!!!')

# 2 Задание.
# Дано 100 уникальных целых чисел. Среди них выведите самое большое число и его позицию.
# Формат входных данных
# Целые числа в интервале от 0 до 100 тыс. .

# Формат выходных данных
# На первой строке выведите самое большое число, на второй его позицию во входе

# numbers = set()
# max_digit = 0
# while len(numbers) != 100:
#     numbers.add(random.randint(0, 100000))
# lst = list(numbers)
# for i in lst:
#     if i > max_digit:
#         max_digit = i
# print(f'Максимальное число:{max_digit} \nЕго позиция {lst.index(max_digit)}')

# 3 Задание.
# Напишите программу которая продолжает считывать новый пароль пока он не будет правильным. Для каждого неправильного ввода пароля выведите на консоль “Incorrect password”. Когда будет введен правильный пароль выведите на консоль "Access permitted"и завершите программу. Правильный пароль 2016.
# Формат входных данных
# Входные данные состоят из нескольких примеров. Каждый пример содержит только целое число (0 < n < 1000 000 000).

# Формат выходных данных
# Для каждого введенного числа выведите соответствующее сообщение из описания задачи.


# 4 Задание.
# Считайте 10 чисел с консоли. После, замените все нули и негативные числа среди них числом 1. Выведите результат на консоль.
# Формат входных данных
# Входные данные состоят из 10 целых чисел (-100000 < n < 100000). Числа могут быть как позитивными так и негативными.

# Формат выходных данных
# Для каждого элемента массива выведите ”N[i] = n” , где i это позиция элемента в массиве, и x это число хранящийся на той позиции.
 

# 5 Задание.
# Напишите программу, которая считывает два целых числа X и Y. Выведите все числа между X и Y, которые при делении на 5 дают остаток равный 2 или 3. Если таких чисел не нашлось выведите “No any number”.
# Формат входных данных
# Входные данные содержат 2 любых натуральных числа (n < 100), не обязательно в порядке возрастания.

# Формат выходных данных
# Выведите на консоль все числа согласно описанию выше, всегда в порядке возрастания или “No any number”.


# 6 Задание.
# Считайте число N. N является количеством чисел Х необходимых для ввода. Найдите сколько из введенных чисел X находятся внутри интервала [10,20] и сколько за интервалом.

# Формат входных данных
# Первая линия ввода это целое число N (N < 10000), которая обозначает общее количество примеров. Каждый из примеров это целое число X (-107 < X < 107).

# Формат выходных данных
# Для каждого примера выведите на консоль сколько чисел внутри интервала сопровождая словом in и сколько за интервалом сопровождая словом out.

# 6 Задание.
# Напишите программу, которая считывает целое число с консоли, которое является порядковым номером числа Фибоначчи и выведите это число. Помните, что первыми элементами ряда Фибоначчи являются 0 и 1, и каждое следующее число является суммой двух предшествующих ему.

# Формат входных данных
# Первая строка ввода содержит одно целое число T, указывающее количество тестовых примеров. Каждый тестовый пример содержит одно целое число N 0 <= N <= 60, соответствующее N-му порядковому номеру Фибоначчи.

# Формат выходных данных
# Для каждого тестового примера выведите сообщение «Fib (N) = X», где X - это N-й член ряда Фибоначчи.
 
# 7 Задание.
# Айсалкын только что стала аспирантом в медицинской школе, и ей нужна ваша помощь в организации лабораторного эксперимента, за который она отвечает. Она хочет знать, в конце года, сколько животных использовалось в этой лаборатории и какой процент от каждого типа животных используется вообще. В этой лаборатории используются, в частности, три типа животных: лягушки, крысы и кошки. Чтобы получить эту информацию, она точно знает количество проведенных экспериментов, тип и количество каждого животного используется в каждом эксперименте.
# Формат входных данных
# Первая строка ввода содержит целое число N, указывающее количество тестовых примеров. Каждый тестовый пример содержит целое число N 1 <= N <= 15, которое представляет количество используемых животных, и символ («C», «R» или «F»), указывающий тип животного: C: Cat (кошка по-английски) R: Rat (крыса по-английски) F: Frog (лягушка по-английски)
 
# some_func([2, [5, "C" ], [1, "R"], [10, "F"]])  -> (16, 31.25, 6.25, 62.5)
 
# 8 Задание.
# Два шахматиста играют в партию. Они условились, что не будут трогать пешки и в конце партии остались только по одной пешки. И если одна из пешек доберется до конца она станет ферзей. 

# Формат входных данных
# Функция принимает 2 аргумента: 1 - позиция белой пешки “H5”, 2 - позиция чёрной пешки “A3”
# Нужно узнать какая из пешек быстрее станет ферзей.
# Логические моменты зависят от самого разработчика))

# 9 Задание.

# Есть функция принимающая два аргумента. Первый аргумент - это кол-во цифр в числе. 
# Второй аргумент -  это само число. (5, 12345). В таком формате будет приходить аргументы).
# Необходимо брать первую и последнюю цифру у этого числа и складывать их. Затем возвращать произведение этих новых чисел.

# Пример решения -> 
# аргументы(5, 12345)
# (1+5)*(2+4)*3 = В случае, если кол-во цифр нечетное
# аргументы(6, 123456)
# (1+6)*(2+5)*(3+4) = В случае, если кол-во цифр будет четное

# 10 Задание.
# Создайте функцию, которая находит площадь треугольника. Функция принимает 3 аргумента: 1 - ширина стороны a, 2 - ширина стороны b, 3 - ширина стороны с. Функция возвращает площадь в квадратах (можно округлить).

# Пример: func(10, 12, 7) -> 35
